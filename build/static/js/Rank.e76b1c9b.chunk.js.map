{"version":3,"sources":["app/components/top-list/TopList.tsx","api/rank.js","app/components/rank/Rank.tsx","app/actions/rank.ts"],"names":["TopList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","unmoutedFlag","back","setState","showMusicList","_normalizeSongs","list","ret","forEach","item","musicData","data","songid","albummid","push","createSong","state","songs","topList","id","history","_getMusicList","_this2","topid","assign","commonParams","needNewCode","uin","tpl","page","type","platform","jsonp","options","getMusicList","then","res","code","ERR_OK","songlist","_this3","bgImage","image","react_default","a","createElement","react_transition_group","in","timeout","classNames","appear","unmountOnExit","onExited","goBack","MusicList","rank","singerName","topTitle","Component","withRouter","connect","ownProps","objectSpread","Rank","selectItem","concat","setTopList","_getTopList","getTopList","topListArr","className","ref","Scroll","length","map","index","key","onClick","Lazy_img","containerClassName","sizes","src","srcset","picUrl","width","height","songList","song","songname","singername","Loading","Route","path","component","dispatch","types"],"mappings":"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","file":"static/js/Rank.e76b1c9b.chunk.js","sourcesContent":["import React,{ Component } from 'react'\r\nimport './TopList.scss'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { getMusicList } from 'api/rank.js'\r\nimport { connect } from 'react-redux'\r\nimport {ERR_OK} from 'api/config'\r\nimport MusicList from 'components/music-list/MusicList'\r\nimport { createSong } from 'common/js/song.js'\r\nimport { withRouter } from 'react-router'\r\n\r\nimport {\r\n    ISong,\r\n    IStoreState,\r\n    ITopList\r\n} from 'store/stateTypes'\r\n\r\ninterface DiscBaseStateType{\r\n    showMusicList: boolean,\r\n    songs:Array<any>\r\n}\r\n\r\ninterface DiscBasePropType{\r\n    topList:ITopList,\r\n    history:any\r\n}\r\n\r\n\r\nclass TopList extends Component<DiscBasePropType, DiscBaseStateType>{\r\n    unmoutedFlag:boolean;\r\n    constructor(props:DiscBasePropType){\r\n        super(props)\r\n        this.unmoutedFlag=false\r\n        this.state  = {\r\n            showMusicList: true,\r\n            songs:[]\r\n        }\r\n    }\r\n\r\n    back = () => {\r\n        this.setState({\r\n            showMusicList:false\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.topList && this.props.topList.id < 0){\r\n            this.props.history.push('/rank')\r\n            return\r\n        }\r\n        this._getMusicList()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.unmoutedFlag=true\r\n    }\r\n\r\n\r\n    _getMusicList() {\r\n        if (!this.props.topList.id) {\r\n            this.props.history.push('/rank')\r\n            return\r\n        }\r\n        getMusicList(this.props.topList.id).then((res) => {\r\n            if (res.code === ERR_OK && !this.unmoutedFlag) {\r\n                this.setState({\r\n                    songs:this._normalizeSongs(res.songlist)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    _normalizeSongs = (list:Array<any>) => {\r\n        let ret:any= []\r\n        list.forEach((item) => {\r\n            let musicData = item.data\r\n            if (musicData.songid && musicData.albummid) {\r\n                ret.push(createSong(musicData))\r\n            }\r\n        })\r\n        return ret\r\n    }\r\n\r\n\r\n    render(){\r\n        const { topList } = this.props;\r\n        const { songs } = this.state;\r\n        const bgImage = songs[0] && songs[0].image\r\n        return(\r\n            <CSSTransition\r\n                in={this.state.showMusicList}\r\n                timeout={500}\r\n                classNames=\"top-list-transition\"\r\n                appear={true}\r\n                unmountOnExit\r\n                onExited = { () => {\r\n                     this.props.history.goBack()\r\n                } }\r\n            >\r\n                <MusicList rank={true} singerName={topList.topTitle} bgImage={bgImage} songs={songs} back={this.back}/>\r\n            </CSSTransition>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:IStoreState,ownProps:any) => (\r\n    {\r\n        topList:state.topList,\r\n        ...ownProps\r\n    }\r\n)\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(TopList))","import {jsonp} from 'common/js/ws'\nimport {commonParams, options} from './config'\n\nexport function getTopList() {\n  const url = 'https://c.y.qq.com/v8/fcg-bin/fcg_myqq_toplist.fcg'\n\n  const data = Object.assign({}, commonParams, {\n    uin: 0,\n    needNewCode: 1,\n    platform: 'h5'\n  })\n\n  return jsonp(url, data, options)\n}\n\nexport function getMusicList(topid) {\n  const url = 'https://c.y.qq.com/v8/fcg-bin/fcg_v8_toplist_cp.fcg'\n\n  const data = Object.assign({}, commonParams, {\n    topid,\n    needNewCode: 1,\n    uin: 0,\n    tpl: 3,\n    page: 'detail',\n    type: 'top',\n    platform: 'h5'\n  })\n\n  return jsonp(url, data, options)\n}\n","import React,{ Component } from 'react'\r\nimport './Rank.scss'\r\nimport Loading from 'reuse/loading/Loading'\r\nimport Scroll from 'reuse/scroll/Scroll'\r\nimport {getTopList} from 'api/rank'\r\nimport {ERR_OK} from 'api/config'\r\nimport { Route, withRouter } from 'react-router'\r\nimport TopList from 'components/top-list/TopList'\r\nimport LazyImage from 'reuse/lazyimg/Lazy-img'\r\nimport { connect } from 'react-redux'\r\nimport { setTopList } from 'actions/rank'\r\n\r\n\r\nimport {\r\n    IStoreState,\r\n    ITopList,\r\n    ISongListItem\r\n} from 'store/stateTypes'\r\nimport { Dispatch } from 'redux'\r\n\r\ninterface RankStateType{\r\n    topListArr:Array<ITopList>\r\n}\r\n\r\ninterface RankPropType{\r\n    history:any,\r\n    location:any,\r\n    match:any,\r\n    setTopList:Function\r\n}\r\n\r\nclass Rank extends Component<RankPropType,RankStateType>{\r\n    unmoutedFlag:boolean;\r\n    constructor(props:RankPropType){\r\n        super(props)\r\n        this.unmoutedFlag=false\r\n        this.state = {\r\n            topListArr:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._getTopList()\r\n    }\r\n\r\n    selectItem = (item:ITopList) => {\r\n        this.props.history.push(`/rank/${item.id}`)\r\n        this.props.setTopList(item)\r\n    }\r\n\r\n    _getTopList = () => {\r\n        getTopList().then((res) => {\r\n            if (res.code === ERR_OK && !this.unmoutedFlag) {\r\n                this.setState({\r\n                    topListArr:res.data.topList\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { topListArr } = this.state\r\n        return(\r\n            <div className=\"rank\" ref=\"rank\">\r\n                <Scroll className=\"toplist\">\r\n                    <ul>\r\n                        {\r\n                            !!topListArr.length && topListArr.map((item:ITopList, index:number) =>(\r\n                                <li className=\"item\" key={index} onClick={() => {this.selectItem(item)}}>\r\n                                    <div className=\"icon\">\r\n                                        <LazyImage\r\n                                            className=\"RankListLazy\"\r\n                                            containerClassName=\"rank\"\r\n                                            sizes=\"200px\"\r\n                                            src=\"https://placehold.it/200x300?text=Image1\"\r\n                                            srcset={item.picUrl}\r\n                                            width=\"100\"\r\n                                            height=\"100\"\r\n                                        />\r\n                                    </div>\r\n                                    <ul className=\"songlist\">\r\n                                        {\r\n                                            item.songList && item.songList.map((song:ISongListItem, index:number) => (\r\n                                                <li className=\"song\" key={index}>\r\n                                                    <span>{index + 1}</span>\r\n                                                    <span>{song.songname}-{song.singername}</span>\r\n                                                </li>\r\n                                            ))\r\n                                        }\r\n                                    </ul>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                    {\r\n                        !topListArr.length &&\r\n                        <div className=\"loading-container\">\r\n                            <Loading/>\r\n                        </div>\r\n                    }\r\n                </Scroll>\r\n                <Route path=\"/rank/:id\" component={TopList}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:IStoreState,ownProps:any) => ({\r\n    ...ownProps\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {\r\n        setTopList : (topList:ITopList) => {\r\n            dispatch(setTopList(topList))\r\n        }\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Rank))","import * as types from './actionsTypes'\r\nimport { ITopList, IActionCreator } from 'store/stateTypes'\r\n\r\nexport const setTopList : IActionCreator = (topList:ITopList) => {\r\n    return {\r\n        type: types.SET_TOP_LIST,\r\n        topList\r\n    }\r\n}"],"sourceRoot":""}